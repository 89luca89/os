# Generated from https://pypi.org/project/asyncssh/
package:
  name: py3-asyncssh
  version: "2.18.0"
  epoch: 0
  description: AsyncSSH is a Python package which provides an asynchronous client and server implementation of the SSHv2 protocol
  copyright:
    - license: EPL-2.0 OR GPL-2.0-or-later

vars:
  pypi-package: asyncssh

data:
  - name: py-versions
    items:
      3.10: '310'
      3.11: '311'
      3.12: '312'
      3.13: '313'

environment:
  contents:
    packages:
      - build-base
      - busybox
      - ca-certificates-bundle
      - py3-supported-pip
      - py3-supported-python-dev
      - py3-supported-setuptools
      - wolfi-base

pipeline:
  - uses: git-checkout
    with:
      repository: https://github.com/ronf/asyncssh
      tag: v${{package.version}}
      expected-commit: 51b78466993766c5c1cd108d73574ba5bbbbc257

subpackages:
  - range: py-versions
    name: py${{range.key}}-${{vars.pypi-package}}
    description: python${{range.key}} version of ${{vars.pypi-package}}
    dependencies:
      provider-priority: ${{range.value}}
      provides:
        - py3-${{vars.pypi-package}}
      runtime:
        - py${{range.key}}-cryptography
        - py${{range.key}}-typing-extensions
    pipeline:
      - uses: py/pip-build-install
        with:
          python: python${{range.key}}
      - uses: strip
    test:
      environment:
        contents:
          packages:
            - py${{range.key}}-cryptography
            - py${{range.key}}-typing-extensions
      pipeline:
        - uses: python/import
          with:
            python: python${{range.key}}
            imports: |
              import ${{vars.pypi-package}}
        - name: Test basic AsyncSSH functionality
          runs: |
            python${{range.key}} <<-EOF
            import asyncssh
            import asyncio

            # Test that key classes are available
            try:
                from asyncssh import SSHClientConnection, SSHServerConnection
                from asyncssh import SSHKey, SSHCertificate
                from asyncssh import create_connection, listen
                print("Core SSH classes imported successfully")
            except ImportError as e:
                print(f"Failed to import core classes: {e}")
                exit(1)

            # Test key generation functionality
            try:
                key = asyncssh.generate_private_key('ssh-rsa', key_size=2048)
                public_key = key.export_public_key()
                if not public_key.startswith(b'ssh-rsa'):
                    raise ValueError("Invalid public key format")
                print("SSH key generation test passed")
            except Exception as e:
                print(f"Key generation test failed: {e}")
                exit(1)

            # Test different key types
            try:
                ed25519_key = asyncssh.generate_private_key('ssh-ed25519')
                ed25519_public = ed25519_key.export_public_key()
                if not ed25519_public.startswith(b'ssh-ed25519'):
                    raise ValueError("Invalid Ed25519 key format")
                print("Ed25519 key generation test passed")
            except Exception as e:
                print(f"Ed25519 key generation test failed: {e}")
                exit(1)

            # Test algorithm availability
            try:
                algorithms = asyncssh.get_server_auth_methods()
                if not algorithms:
                    raise ValueError("No authentication methods available")
                print(f"Authentication methods available: {algorithms}")
            except Exception as e:
                print(f"Algorithm test failed: {e}")
                exit(1)

            print("All AsyncSSH functionality tests passed!")
            EOF

  - name: py3-supported-${{vars.pypi-package}}
    description: meta package providing ${{vars.pypi-package}} for supported python versions.
    dependencies:
      runtime:
        - py3.10-${{vars.pypi-package}}
        - py3.11-${{vars.pypi-package}}
        - py3.12-${{vars.pypi-package}}
        - py3.13-${{vars.pypi-package}}
    test:
      environment:
        contents:
          packages:
            - py3.10-cryptography
            - py3.10-typing-extensions
      pipeline:
        - uses: python/import
          with:
            python: python3.10
            imports: |
              import ${{vars.pypi-package}}
        - name: Test AsyncSSH key parsing functionality
          runs: |
            python3.10 <<-EOF
            import asyncssh
            import tempfile
            import os

            # Test SSH key parsing and validation
            try:
                # Generate a test key
                private_key = asyncssh.generate_private_key('ssh-rsa')
                public_key = private_key.export_public_key()

                # Test key import/export cycle
                imported_key = asyncssh.import_public_key(public_key)
                if imported_key.get_algorithm() != 'ssh-rsa':
                    raise ValueError("Key algorithm mismatch")
                print("SSH key parsing test passed")
            except Exception as e:
                print(f"Key parsing test failed: {e}")
                exit(1)

            # Test connection options parsing
            try:
                options = asyncssh.SSHClientConnectionOptions()
                if not hasattr(options, 'known_hosts'):
                    raise ValueError("Missing known_hosts attribute")
                print("Connection options test passed")
            except Exception as e:
                print(f"Connection options test failed: {e}")
                exit(1)

            print("All meta package functionality tests passed!")
            EOF

update:
  enabled: true
  github:
    identifier: ronf/asyncssh
    strip-prefix: v
    use-tag: true
