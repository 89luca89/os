package:
  name: gitlab-cng-17.1
  version: 17.1.2
  epoch: 1
  description: Cloud Native container images per component of GitLab
  copyright:
    - license: MIT
  dependencies:
    provides:
      - gitlab-cng=${{package.full-version}}

environment:
  contents:
    packages:
      - bash
      - build-base
      - busybox
      - ca-certificates
      - ca-certificates-bundle
      - heimdal-dev
      - icu-dev
      - libpq-16
      - postgresql-dev
      - ruby-3.2
      - ruby-3.2-dev
      - ruby3.2-bundler
      - yq
      - zlib-dev

pipeline:
  - uses: git-checkout
    with:
      repository: https://gitlab.com/gitlab-org/build/CNG.git
      tag: v${{package.version}}
      expected-commit: c0a04be0bcd1811a249573b81a330106be79998e

  # Referenced for component versions
  - runs: cp ./ci_files/variables.yml /tmp/variables.yml

data:
  # Used to create all of the *-scripts subpackages from the CNG repo.
  - name: scripts
    items:
      cfssl-self-sign: ./cfssl-self-sign
      container-registry: ./gitlab-container-registry
      exporter: ./gitlab-exporter
      geo-logcursor: ./gitlab-geo-logcursor
      gitaly: ./gitaly
      mailroom: ./gitlab-mailroom
      pages: ./gitlab-pages
      rails: ./gitlab-rails
      shell: ./gitlab-shell
      sidekiq: ./gitlab-sidekiq
      toolbox: ./gitlab-toolbox
      webservice: ./gitlab-webservice
      workhorse: ./gitlab-workhorse

subpackages:
  - range: scripts
    name: "${{package.name}}-${{range.key}}-scripts"
    dependencies:
      provides:
        - "gitlab-cng-${{range.key}}-scripts=${{package.full-version}}"
    pipeline:
      - runs: |
          cd ${{range.value}}
          for x in $(find scripts/ -type f); do
            mkdir -p ${{targets.subpkgdir}}/$(dirname $x)
            cp -r $x ${{targets.subpkgdir}}/$x
          done

  - name: "${{package.name}}-base"
    pipeline:
      - runs: |
          cd ./gitlab-base
          for x in $(find scripts/ -type f); do
            mkdir -p ${{targets.subpkgdir}}/$(dirname $x)
            cp -r $x ${{targets.subpkgdir}}/$x
          done
    dependencies:
      provides:
        - gitlab-cng-base=${{package.full-version}}
      runtime:
        - bash
        - busybox
        - ca-certificates-bundle
        - curl
        - gitlab-logger
        - gomplate
        - procps
        - xtail

  - name: "${{package.name}}-webservice-config"
    pipeline:
      - runs: |
          cd ./gitlab-webservice
          mkdir -p ${{targets.subpkgdir}}/srv/gitlab/config
          cp configuration/puma.rb ${{targets.subpkgdir}}/srv/gitlab/config
    dependencies:
      provides:
        - gitlab-cng-webservice-config=${{package.full-version}}

  - name: "${{package.name}}-certificates"
    pipeline:
      - runs: |
          cd ./certificates
          for x in $(find scripts/ -type f); do
            mkdir -p ${{targets.subpkgdir}}/$(dirname $x)
            cp -r $x ${{targets.subpkgdir}}/$x
          done
          ./scripts/bundle-certificates
    dependencies:
      runtime:
        - ca-certificates
        - gitlab-cng-base
    test:
      pipeline:
        - name: Test bundle-certificates script
          runs: |
            # if bundle-certificates runs correctly, it dereferences symlinks outside of /etc/ssl/certs
            for f in /etc/ssl/certs/*.pem /etc/ssl/certs/*.crt; do
              if [ -L "$f" ]; then
                origin=$(readlink -f "$f")
                originPath=${origin%/*}
                if [ "$originPath" != "/etc/ssl/certs" ]; then
                  echo "Error: $f is a symlink pointing outside of /etc/ssl/certs to $origin"
                  exit 1
                fi
              fi
            done

  - name: ${{package.name}}-gitlab-container-registry
    description: The GitLab Container Registry originated as a fork of the Docker Distribution Registry, now CNCF Distribution, both distributed under Apache License Version 2.0.
    dependencies:
      provides:
        - gitlab-cng-gitlab-container-registry=${{package.full-version}}
    pipeline:
      - runs: |
          # Parse version of component used in CNG release and checkout source
          component_version=$(yq -r '.variables.GITLAB_CONTAINER_REGISTRY_VERSION' /tmp/variables.yml)
          git remote add registry https://gitlab.com/gitlab-org/container-registry
          git fetch registry "${component_version}"
          git checkout -f FETCH_HEAD

          mkdir -p "${{targets.contextdir}}"/etc/docker/registry

          # Expand go/build pipeline so that we can set the proper package version
          mkdir -p "${{targets.contextdir}}"/usr/bin
          shell_version="${component_version//-gitlab}"
          go build \
            -o "${{targets.contextdir}}"/usr/bin \
            -tags "netgo,osusergo,include_oss,include_gcs,continuous_profiler_stackdriver" \
            -ldflags "-w -X github.com/docker/distribution/version.Version=${shell_version} -X github.com/docker/distribution/version.Revision=$(git rev-parse HEAD || echo '<unknown>') -X github.com/docker/distribution/version.Package="github.com/docker/distribution" -X github.com/docker/distribution/version.BuildTime=$(date +%F-%T)" \
            -trimpath ./cmd/registry
    test:
      environment:
        contents:
          packages:
            - crane
            - gitlab-cng-gitlab-container-registry-compat
      pipeline:
        - runs: |
            #!/bin/bash

            # Create the configuration file
            tee /etc/docker/registry/config.yml <<EOL
            # This config file is a basic configuration using filesystem metadata and blob
            # storage.
            version: 0.1
            log:
              accesslog:
                disabled: false
                formatter: text
              level: info
              formatter: text
              fields:
                service: registry
            storage:
              delete:
                enabled: true
              filesystem:
                # Temp dir, rename if you need persistence.
                # registry/storage/paths.go describes the structure of the data
                # written to this directory
                rootdirectory: "/tmp/registry"
            http:
              # Registry API will be accessible at localhost:5000
              addr: :5000
              debug:
                addr: :5001
                prometheus:
                  enabled: true
                  path: /metrics
                pprof:
                  enabled: true
            EOL

            # Run the Docker registry with the configuration file
            /bin/registry serve /etc/docker/registry/config.yml &
            PID=$!

            # Wait for the registry to start
            sleep 5

            # Test the registry
            crane catalog localhost:5000

            # copy the image to the registry
            crane copy alpine:latest localhost:5000/alpine:latest

            # check for the image in the registry
            crane manifest localhost:5000/alpine:latest

            # Stop the registry
            kill $PID

  - name: ${{package.name}}-gitlab-container-registry-compat
    dependencies:
      provides:
        - gitlab-cng-gitlab-container-registry-compat=${{package.full-version}}
    pipeline:
      - runs: |
          # https://gitlab.com/gitlab-org/build/CNG/-/blob/master/gitlab-container-registry/scripts/process-wrapper?ref_type=heads#L3
          mkdir -p "${{targets.contextdir}}"/bin
          ln -sf /usr/bin/registry "${{targets.contextdir}}"/bin/registry

  - name: ${{package.name}}-gitlab-elasticsearch-indexer
    description: Elasticsearch indexer for GitLab EE, written in Go
    dependencies:
      provides:
        - gitlab-cng-gitlab-elasticsearch-indexer=${{package.full-version}}
    pipeline:
      - runs: |
          # Parse version of component used in CNG release and checkout source
          component_version=$(yq -r '.variables.GITLAB_ELASTICSEARCH_INDEXER_VERSION' /tmp/variables.yml)
          git remote add indexer https://gitlab.com/gitlab-org/gitlab-elasticsearch-indexer
          git fetch indexer "${component_version}"
          git checkout -f FETCH_HEAD
      - uses: go/bump
        with:
          deps: google.golang.org/grpc@v1.64.1
      - uses: go/build
        with:
          packages: .
          output: gitlab-elasticsearch-indexer
    test:
      pipeline:
        - runs: |
            gitlab-elasticsearch-indexer --version
            gitlab-elasticsearch-indexer --help

  - name: ${{package.name}}-gitlab-elasticsearch-indexer-compat
    dependencies:
      provides:
        - gitlab-cng-gitlab-elasticsearch-indexer-compat=${{package.full-version}}
    pipeline:
      - runs: |
          mkdir -p "${{targets.subpkgdir}}/usr/local/bin"
          ln -sf /usr/bin/gitlab-elasticsearch-indexer ${{targets.subpkgdir}}/usr/local/bin/gitlab-elasticsearch-indexer

  - name: ${{package.name}}-gitlab-exporter
    description: GitLab Exporter is a Prometheus Web exporter.
    dependencies:
      provides:
        - gitlab-cng-gitlab-exporter=${{package.full-version}}
      runtime:
        - jemalloc
        - ruby-3.2
        - libpq-16
        - busybox
        - ${{package.name}}-base
        - ${{package.name}}-exporter-scripts
        - ruby3.2-webrick
        - ruby3.2-faraday
        - ruby3.2-faraday-excon
        - ruby3.2-mustermann
        - ruby3.2-bundler
        - ruby3.2-deep_merge
        - ruby3.2-redis
        - ruby3.2-redis-namespace
        - ruby3.2-sinatra
        - ruby3.2-puma
        - ruby3.2-pg
        - ruby3.2-sidekiq
        - ruby3.2-quantile
        - ruby3.2-connection_pool
        - ruby3.2-tilt
        - ruby3.2-nio4r
        - ruby3.2-rack-2.2
        - ruby3.2-rack-protection
    pipeline:
      # GitLab-Exporter
      - runs: |
          # Parse version of component used in CNG release and checkout source
          component_version=$(yq -r '.variables.GITLAB_EXPORTER_VERSION' /tmp/variables.yml)
          git remote add exporter https://gitlab.com/gitlab-org/gitlab-exporter
          git fetch exporter "${component_version}"
          git checkout -f FETCH_HEAD
      # GitLab-Exporter Runtime Dependencies
      - uses: ruby/unlock-spec
      - runs: |
          cat gitlab-exporter.gemspec

          # CVE-2023-40175 puma
          sed -e 's/5.6.7/>= 5.6.7/' -i gitlab-exporter.gemspec

          # CVE-2023-26141 sidekiq conflicting with the redis version as well
          sed -e 's/6.4.0/>= 6.5.10/' -i gitlab-exporter.gemspec
          sed -e 's/4.4.0/>= 4.5.0/' -i gitlab-exporter.gemspec

          # Unlock strict version requirements of connection_pool, pg, redis-namespace and quantile
          sed -e 's/2.2.5/>= 2.4.1/' -i gitlab-exporter.gemspec
          sed -e 's/1.5.3/>= 1.5.3/' -i gitlab-exporter.gemspec
          sed -e 's/1.9.0/>= 1.9.0/' -i gitlab-exporter.gemspec
          sed -e 's/0.2.1/>= 0.2.1/' -i gitlab-exporter.gemspec

          # Unlock Faraday
          sed -e 's/faraday", \[">= 1.8.0", "<= 2.8.1"\]/faraday", ">= 1.8.0"/' -i gitlab-exporter.gemspec
          sed -e "s:(=:(>=:g" -i Gemfile.lock
      - uses: ruby/build
        with:
          gem: gitlab-exporter
      - runs: |
          # Because we use the CNG version, are unable to pass the correct gem version to the ruby/install melange pipeline
          GEM_VERSION=$(yq -r '.variables.GITLAB_EXPORTER_VERSION' /tmp/variables.yml | grep -o '[0-9][0-9].[0-9].[0-9]')

          TARGET_DIR_BIN="${{targets.contextdir}}/usr/bin"
          TARGET_DIR_INSTALL="${{targets.contextdir}}$(ruby -e 'puts Gem.default_dir')/"

          mkdir -p "${TARGET_DIR_BIN}"
          mkdir -p "${TARGET_DIR_INSTALL}"

          gem install gitlab-exporter-${GEM_VERSION}.gem \
            --install-dir ${TARGET_DIR_INSTALL}  \
            --bindir ${TARGET_DIR_BIN} \
            --version ${GEM_VERSION} \
            --ignore-dependencies \
            --no-document \
            --verbose \
            --local
      - uses: ruby/clean
    test:
      environment:
        contents:
          packages:
            - wolfi-base
        environment:
      pipeline:
        - name: "Test gitlab-exporter"
          runs: |
            if ! command -v gitlab-exporter &> /dev/null; then
              echo "GitLab Exporter is not installed."
              exit 1
            fi

  - name: ${{package.name}}-gitlab-logger
    description: GitLab Logger provides a means of wrapping non-structured log files within structure JSON.
    dependencies:
      provides:
        - gitlab-cng-gitlab-logger=${{package.name}}
    pipeline:
      - runs: |
          # Parse version of component used in CNG release and checkout source
          component_version=$(yq -r '.variables.GITLAB_LOGGER_VERSION' /tmp/variables.yml)
          git remote add logger https://gitlab.com/gitlab-org/cloud-native/gitlab-logger
          git fetch logger "${component_version}"
          git checkout -f FETCH_HEAD

          # Expand go/build pipeline so that we can set the proper package version
          mkdir -p "${{targets.contextdir}}"/usr/bin
          go build \
            -o "${{targets.contextdir}}"/usr/bin \
            -tags "netgo,osusergo" \
            -ldflags "-X main.version=${component_version} -X main.buildtime=$(date +%F-%T)" \
            -trimpath ./cmd/gitlab-logger
    test:
      environment:
        contents:
          packages:
            - gitlab-cng-gitlab-logger-compat
      pipeline:
        - runs: |
            gitlab-logger -h

  - name: ${{package.name}}-gitlab-logger-compat
    dependencies:
      provides:
        - gitlab-cng-gitlab-logger-compat=${{package.full-version}}
    pipeline:
      - runs: |
          # GitLab helm chart mostly hardcodes multiple executables path to /usr/local/bin/*
          mkdir -p "${{targets.subpkgdir}}"/usr/local/bin
          ln -s /usr/bin/gitlab-logger "${{targets.subpkgdir}}"/usr/local/bin/gitlab-logger

  - name: ${{package.name}}-gitlab-mailroom
    description: GitLab mail_room contains some merged functionality that GitLab requires, so this mirror fork is to help us release custom functionality.
    dependencies:
      provides:
        - gitlab-cng-gitlab-mailroom=${{package.name}}
      runtime:
        - jemalloc
        - ruby-3.2
        - busybox
        - ${{package.name}}-base
        - ${{package.name}}-mailroom-scripts
        - ruby3.2-webrick
        - ruby3.2-bundler
        - ruby3.2-oauth2
        - ruby3.2-rack
        - ruby3.2-redis
        - ruby3.2-redis-namespace
        - ruby3.2-redis-client
        - ruby3.2-charlock_holmes
        - ruby3.2-snaky_hash
    pipeline:
      # GitLab-Mail_Room
      - runs: |
          # Parse version of component used in CNG release and checkout source
          component_version=$(yq -r '.variables.MAILROOM_VERSION' /tmp/variables.yml)
          git remote add mail https://gitlab.com/gitlab-org/ruby/gems/gitlab-mail_room
          git fetch mail v"${component_version}"
          git checkout -f FETCH_HEAD
      - uses: ruby/unlock-spec
      - uses: ruby/build
        with:
          gem: mail_room
      - runs: |
          # Because we use the CNG version, are unable to pass the correct gem version to the ruby/install melange pipeline
          GEM_VERSION=$(yq -r '.variables.MAILROOM_VERSION' /tmp/variables.yml | grep -o '[0-9].[0-9].[0-9][0-9]')

          TARGET_DIR_BIN="${{targets.contextdir}}/usr/bin"
          TARGET_DIR_INSTALL="${{targets.contextdir}}$(ruby -e 'puts Gem.default_dir')/"

          mkdir -p "${TARGET_DIR_BIN}"
          mkdir -p "${TARGET_DIR_INSTALL}"

          gem install gitlab-mail_room-${GEM_VERSION}.gem \
            --install-dir ${TARGET_DIR_INSTALL}  \
            --bindir ${TARGET_DIR_BIN} \
            --version ${GEM_VERSION} \
            --ignore-dependencies \
            --no-document \
            --verbose \
            --local
      - uses: ruby/clean

  - name: ${{package.name}}-gitlab-shell
    description: SSH access for GitLab
    dependencies:
      provides:
        - gitlab-cng-gitlab-shell=${{package.full-version}}
      runtime:
        - ${{package.name}}-base
        - ${{package.name}}-shell-scripts
        - ${{package.name}}-gitlab-logger-compat
        - openssh
    pipeline:
      - runs: |
          # Parse version of component used in CNG release and checkout source
          component_version=$(yq -r '.variables.GITLAB_SHELL_VERSION' /tmp/variables.yml)
          git remote add shell https://gitlab.com/gitlab-org/gitlab-shell
          git fetch shell "${component_version}"
          git checkout -f FETCH_HEAD
      - uses: go/bump
        with:
          deps: google.golang.org/grpc@v1.64.1
      - runs: |
          make build

          BINDIR=${{targets.contextdir}}/srv/gitlab-shell/bin
          mkdir -p "${BINDIR}"

          install -m755 bin/check "${BINDIR}/check"
          install -m755 bin/gitlab-shell "${BINDIR}/gitlab-shell"
          install -m755 bin/gitlab-shell-authorized-keys-check "${BINDIR}/gitlab-shell-authorized-keys-check"
          install -m755 bin/gitlab-shell-authorized-principals-check "${BINDIR}/gitlab-shell-authorized-principals-check"
          install -m755 bin/gitlab-sshd "${BINDIR}/gitlab-sshd"

          mkdir -p ${{targets.contextdir}}/srv/gitlab-shell/
          cp LICENSE VERSION ${{targets.contextdir}}/srv/gitlab-shell/

          install -d ${{targets.contextdir}}/srv/sshd
          install -d ${{targets.contextdir}}/etc/ssh
          install -d ${{targets.contextdir}}/var/log/gitlab-shell
          touch ${{targets.contextdir}}/var/log/gitlab-shell/gitlab-shell.log

update:
  enabled: true
  manual: true
  release-monitor:
    identifier: 373190
