package:
  name: newrelic-nri-kube-events
  version: "2.16.1"
  epoch: 0 # CVE-2025-47907
  description: New Relic integration that forwards Kubernetes events to New Relic
  copyright:
    - license: Apache-2.0

environment:
  contents:
    packages:
      - busybox
      - ca-certificates-bundle
      - wolfi-baselayout

pipeline:
  # We can't use go/install because this requires specific ldflags to set the version
  - uses: git-checkout
    with:
      repository: https://github.com/newrelic/nri-kube-events
      tag: v${{package.version}}
      expected-commit: fddacdc728e1e3f9b5a22e7d24bb61673f0e5dbe

  - uses: go/build
    with:
      packages: ./cmd/nri-kube-events
      ldflags: -X main.integrationVersion=v${{ package.version }}
      output: nri-kube-events

update:
  enabled: true
  github:
    identifier: newrelic/nri-kube-events
    strip-prefix: v
    tag-filter: v

test:
  environment:
    contents:
      packages:
        - kubectl
    environment:
      KUBERNETES_SERVICE_HOST: "127.0.0.1"
      KUBERNETES_SERVICE_PORT: "32764"
  pipeline:
    - uses: test/tw/help-check
      with:
        bins: nri-kube-events
    - uses: test/kwok/cluster
    - name: Basic Functional test
      uses: test/daemon-check-output
      with:
        setup: |
          # In-cluster SA materials expected by client-go
          mkdir -p /var/run/secrets/kubernetes.io/serviceaccount
          # Copy cluster CA used by kwok into the SA path
          CA=$(kubectl config view --raw -o jsonpath='{.clusters[0].cluster.certificate-authority}')
          cp "$CA" /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
          # Ensure the service account exists and mint a token file for client-go
          kubectl create serviceaccount default --dry-run=client -o yaml | kubectl apply -f -
          kubectl create token default > /var/run/secrets/kubernetes.io/serviceaccount/token
          # client-go reads the namespace from this file
          echo -n "default" > /var/run/secrets/kubernetes.io/serviceaccount/namespace

          # RBAC so the SA can list/watch core/v1 events cluster-wide
          cat <<'EOF' | kubectl apply -f -
          apiVersion: rbac.authorization.k8s.io/v1
          kind: ClusterRole
          metadata:
            name: nri-kube-events-read-events
          rules:
          - apiGroups: [""]
            resources: ["events"]
            verbs: ["get","list","watch"]
          ---
          apiVersion: rbac.authorization.k8s.io/v1
          kind: ClusterRoleBinding
          metadata:
            name: nri-kube-events-read-events
          subjects:
          - kind: ServiceAccount
            name: default
            namespace: default
          roleRef:
            apiGroup: rbac.authorization.k8s.io
            kind: ClusterRole
            name: nri-kube-events-read-events
          EOF
          # Minimal config: stdout sink
          cat > /tmp/test-config.yaml <<'YAML'
          log:
            level: info
          sinks:
            - name: stdout
              kind: stdout
          YAML
        start: nri-kube-events --config /tmp/test-config.yaml -promaddr 127.0.0.1:0
        timeout: 10
        expected_output: |
          New Relic Kube Events integration
          ${{package.version}}
          Router started
          Serving Prometheus metrics
